div
  h2 5.2) Request Object
  
  p Each route call take a Request Object instead of the usuals 'req' and 'res'.
  
  p This object has the same properties as 'req' does, but has also 'res' available as 'req.res'.
  
  P Also, it provides two useful functions to send content and errors :
  
  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get -> it.Send toto: \tata
        
  p But as each callback return is used to be automaticaly sent, you can define it as follow: 

  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get -> toto: \tata

  p If you encounters errors, you can send them with 'SendError()', wrapping the error around a {err: } object
  
  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get -> it.SendError 'There is an error'

  p But as each callback is wrapped in a try/catch, you can directly throw the error

  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get -> throw 'There is an error'
    
  
  p Actually, it send an error 500 by default, but you can customise it by sending a specific object as follow: 

  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get -> throw status: 'not_found'
    
  p It will math the following values for 'status' property: 
    ul
      li not_found: 404
      li forbidden: 403
      li 'Error on Delete': 500
  
  p You can customise the message by adding a 'message' property, and the code by adding a 'code' one (it override the status)
  
  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get -> throw code: 404 message: 'Unable to find this'
    
  h3 Resource promise
  
  p If you return a Resource Promise, the Request wrapper will automaticaly resolve it and sent the result or the resulting error.
  
  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get       ~> @resource.List!
    |     @Get \/:id ~> @resource.Fetch it.params.id
    | 
    | N \test TestRoute
    
  P Be careful if you want to use callbacks instead of promises here, you have to avoid to return or return undefined in order to use 'Send()' or 'SendError()' inside a callback
  
  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @Get (req) !~> 
    |       fs.readdir req.query.path, (err, list) ->
    |         return req.SendError err if err? 
    | 
    |         req.Send list


  h3 SetInstance
  
  p The SetInstance() method takes a Resource promise and set a 'instance' property with the result into the Request object, then call 'next()'.
  
  livescript
    | class TestRoute extends N.Route
    |   Config: ->
    |     @All \/:id* ~> it.SetInstance @resource.Fetch it.params.id
    |     @Get \/:id  (.instance)
    |     @Put \/:id  (.instance.Set it.body)
    | 
    | N \test TestRoute
